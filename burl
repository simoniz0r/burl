#!/bin/bash
# Title: burl
# Author: simonizor
# License: MIT
# Dependencies: openssl
# Description: A simple script that makes 'openssl' and bash's '/dev/tcp' easier to use

# function to handle all except POST requests with openssl
req.openssl() {
    BURL_HEADERS="$(echo ${BURL_HEADERS[@]} | sed 's%: %:#%g;s% %\r\n%g;s%:#%: %g')"
    echo -ne "$BURL_METHOD $BURL_URL HTTP/1.0\r\nHost: $BURL_HOST\r\n$BURL_HEADERS\r\n\r\n" | \
    openssl s_client -connect "$BURL_HOST":443 -quiet 2> /dev/null
}
# function to handle all except POST requests with bash
req.bash() {
    BURL_HEADERS="$(echo ${BURL_HEADERS[@]} | sed 's%: %:#%g;s% %\r\n%g;s%:#%: %g')"
    exec 9<> /dev/tcp/"$BURL_HOST"/80
    echo -ne "$BURL_METHOD $BURL_URL HTTP/1.0\r\nHost: $BURL_HOST\r\n$BURL_HEADERS\r\n\r\n" >& 9
    cat <& 9
}
# function to detect shortopts
burl.argparse() {
    # unset used variables to avoid double setting each time ran
    unset BURL_QUIET BURL_METHOD_SET BURL_HEADERS_SET
    # run for loop on each character of input using 'grep -o .'
    for arg in $(echo "$1" | grep -o .); do
        case "$arg" in
            # skip the dash
            -) sleep 0;;
            # quiet mode
            q|s) export BURL_QUIET="TRUE";;
            # request method
            X|m) export BURL_METHOD_SET="TRUE";;
            # set headers
            H) export BURL_HEADERS_SET="TRUE";;
            # add anything else to invalid arguments array
            *) export BURL_INVALID_ARG+=("$arg");;
        esac
    done
}
# function to output help
burl.help() {
printf "%s\n" "burl 0.0.1
A simple script that makes 'openssl' and bash's '/dev/tcp' easier to use

Usage:
    burl [options] <url>
    
Options:
    -q, -s      Enable quiet mode
    
    -X, -m      Specify the request command to use (Ex: HEAD, GET, POST)
    
    -H          Pass custom header(s) to the server (may be used more than once)
"
}
# detect arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        # output help and break
        --help|-h) burl.help; exit 0;;
        # parse shortopts using burl.argparse function
        -[a-zA-Z]*)
            burl.argparse "$1"
            shift
            # if X or m passed, set BURL_METHOD to upper case of following input
            if [[ "$BURL_METHOD_SET" == "TRUE" ]]; then
                BURL_METHOD="$(echo $1 | tr '[:lower:]' '[:upper:]')"
                shift
            fi
            # if H passed, add following input to BURL_HEADERS array
            if [[ "$BURL_HEADERS_SET" == "TRUE" ]]; then
                BURL_HEADERS+=("$1")
                shift
            fi
            ;;
        # no longopts yet so add to invalid args array
        --*) BURL_INVALID_ARG+=("$1"); shift;;
        # assume any other input is the url to be used
        *) BURL_URL="$1"; shift;;
    esac
done
# if invalid arguments passed, show them and exit
if [[ "$BURL_INVALID_ARG" != "" ]]; then
    echo "Invalid argument(s) passed: $(printf '%s,' "${BURL_INVALID_ARG[@]}" | rev | cut -f2- -d',' | rev)"
    echo "See '--help' for usage."
    exit 1
fi
# set curl user agent if user agent not set
if ! echo "${BURL_HEADERS[@]}" | grep -q 'User-Agent:'; then
    BURL_HEADERS+=("User-Agent: curl/7.64.0")
fi
# if BURL_METHOD is HEAD, disable quiet mode
if [[ "$BURL_METHOD" == "HEAD" ]]; then
    BURL_QUIET="FALSE"
fi
# if BURL_METHOD not set, use GET
if [[ -z "$BURL_METHOD" ]]; then
    BURL_METHOD="GET"
fi
# unset BURL_OUT in case set externally
unset BURL_OUT
# if missing url, output help
if [[ -z "$BURL_URL" ]]; then
    echo "Missing url.  See '--help' for usage."
# if BURL_QUIET is TRUE, get rid of header info using awk and tail
elif [[ "$BURL_QUIET" == "TRUE" ]]; then
    # get host domain from full URL
    BURL_HOST="$(echo $BURL_URL | cut -f3 -d'/')"
    # try with openssl first and fallback to bash
    BURL_METHOD_SAVED="$BURL_METHOD"
    BURL_METHOD="HEAD"
    BURL_OUT="$(req.openssl)"
    BURL_METHOD="$BURL_METHOD_SAVED"
    if [[ ! "$BURL_OUT" == "" ]]; then
        req.openssl | awk '/^\r$/,0' | tail -n +2
    else
        req.bash | awk '/^\r$/,0' | tail -n +2
    fi
else
    # get host domain from full URL
    BURL_HOST="$(echo $BURL_URL | cut -f3 -d'/')"
    # try with openssl first and fallback to bash
    BURL_METHOD_SAVED="$BURL_METHOD"
    BURL_METHOD="HEAD"
    BURL_OUT="$(req.openssl)"
    BURL_METHOD="$BURL_METHOD_SAVED"
    if [[ ! "$BURL_OUT" == "" ]]; then
        req.openssl
    else
        req.bash
    fi
    # echo to ensure newline at end if BURL_METHOD is GET
    if [[ "$BURL_METHOD" == "GET" ]]; then
        echo
    fi
fi
